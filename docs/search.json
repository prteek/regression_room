[
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "Prateek",
    "section": "",
    "text": "I am a Lead Data Scientist at Bricklane Technologies. When not dabbling in data analysis, I enjoy spending time reading or running."
  },
  {
    "objectID": "posts/movies-getting-longer/index.html",
    "href": "posts/movies-getting-longer/index.html",
    "title": "Are blockbusters getting (reely) longer ?",
    "section": "",
    "text": "I recently came across an article posing a question:\n\nAre blockbusters getting (reely) longer?\n\nFueled by the buzz around Christopher Nolanâ€™s Oppenheimer being his longest movie (just over 3 hours), I decided to explore this question using publicly available data.\nAs an exercise in inference this question can be answered with some analysis. I fetched top grossing movies in each year from boxoffice mojo and movie details from imdb and combined them to create the following dataset.\ndata\n\n\n\n\n\n\n            \n            \n            \n\n\n\n# Load the dataset\nsql = lambda q: duckdb.sql(q).df()\nquery_read_and_format_data = \"\"\"\nSELECT * FROM read_csv_auto('movies_dataset.csv')\nWHERE runtime_mins IS NOT NULL\n\"\"\"\ndf_yearly_top_movies = sql(query_read_and_format_data)\ndf_yearly_top_movies.head()\n\n\n\n\n\n\n\n\nrelease_year\nruntime_mins\ntitle\n\n\n\n\n0\n1990\n103.0\nHome Alone\n\n\n1\n1990\n127.0\nGhost\n\n\n2\n1990\n181.0\nDances with Wolves\n\n\n3\n1990\n119.0\nPretty Woman\n\n\n4\n1990\n93.0\nTeenage Mutant Ninja Turtles\n\n\n\n\n\n\n\n\n# Plot 1: Scatterplot of runtimes over years\np1 = (\n    gg.ggplot(df_yearly_top_movies, gg.aes(x='release_year', y='runtime_mins')) +\n    gg.geom_point(size=5) +\n    gg.geom_text(gg.aes(label='title'), data=df_annotations, color=\"red\", nudge_y=5) +\n    gg.geom_line(gg.aes(y='runtime_mins'), data=mean_df, color=\"black\") +\n    gg.ggtitle('Top Grossing Movies per Year')\n)\np1.show()\n\n   \n   \n\n\n\n\n\nTo simplify the analysis we can consider more recent releases (2022) and compare them to releases from much older timeframe (1990-2000).  The runtime distributions for movies in these 2 categories is different although not significantly.\n\nbase_window = 1990, 2001\ntest_year = 2022\n\n# We shall create a tidy dataset for further exploration\nquery_test = f\"\"\"\nselect runtime_mins\n, case when release_year={test_year} then '{test_year}'\nelse '{base_window[0]}-{base_window[1]-1}'\nend as release_year\nfrom df_yearly_top_movies\nwhere (release_year &gt;= {base_window[0]} and release_year &lt; {base_window[1]}) or (release_year={test_year})\n\"\"\"\n\ndf_test = sql(query_test)\n\np2 = gg.ggplot(df_test) + \\\n    gg.geom_density(\n        gg.aes(x='runtime_mins', fill='release_year'),\n        alpha=0.5,\n        size=0.5\n    )\n\np2.show()\n\n   \n   \n\n\nNow we can compare runtimes between two periods. It would have been a straightforward exercise in testing the hypothesis of difference of means using a t-test had the distributions of runtimes been more normally distributed.  Since this is not the case, we resort to using bootstrap to compare the difference of means. \n\nvariable = \"runtime_mins\"\nalpha = 0.05\n\ng1 = sql(f\"SELECT {variable} FROM df_yearly_top_movies WHERE release_year &lt; 2001\")\ng2 = sql(f\"SELECT {variable} FROM df_yearly_top_movies WHERE release_year == 2022\")\n\ndef difference_of_mean(sample1, sample2):\n    return np.mean(sample2) - np.mean(sample1)\n\nres = stats.bootstrap((g1[variable], g2[variable]), statistic=difference_of_mean, random_state=42)\n\nprint(f\"Mean difference of means: {round(np.mean(res.bootstrap_distribution),0)}\")\nprint(f\"Proportion &gt; 0: {round(np.mean(res.bootstrap_distribution &gt; 0),2)}\")\n\nMean difference of means: 20.0\nProportion &gt; 0: 0.97\n\n\nIf we bootstrap the mean of movie times and take the difference between means of release year 2022 from release years 1990-2000, there is evidence that blockbuster movies are getting longer in recent years, and the difference can be up to 20 min. \nSo on your next visit to the theatre make sure to get some extra popcorn."
  },
  {
    "objectID": "posts/movies-getting-longer/index.html#data",
    "href": "posts/movies-getting-longer/index.html#data",
    "title": "Are blockbusters getting (reely) longer ?",
    "section": "",
    "text": "# Load the dataset\nsql = lambda q: duckdb.sql(q).df()\nquery_read_and_format_data = \"\"\"\nSELECT * FROM read_csv_auto('movies_dataset.csv')\nWHERE runtime_mins IS NOT NULL\n\"\"\"\ndf_yearly_top_movies = sql(query_read_and_format_data)\ndf_yearly_top_movies.head()\n\n\n\n\n\n\n\n\nrelease_year\nruntime_mins\ntitle\n\n\n\n\n0\n1990\n103.0\nHome Alone\n\n\n1\n1990\n127.0\nGhost\n\n\n2\n1990\n181.0\nDances with Wolves\n\n\n3\n1990\n119.0\nPretty Woman\n\n\n4\n1990\n93.0\nTeenage Mutant Ninja Turtles\n\n\n\n\n\n\n\n\n# Plot 1: Scatterplot of runtimes over years\np1 = (\n    gg.ggplot(df_yearly_top_movies, gg.aes(x='release_year', y='runtime_mins')) +\n    gg.geom_point(size=5) +\n    gg.geom_text(gg.aes(label='title'), data=df_annotations, color=\"red\", nudge_y=5) +\n    gg.geom_line(gg.aes(y='runtime_mins'), data=mean_df, color=\"black\") +\n    gg.ggtitle('Top Grossing Movies per Year')\n)\np1.show()"
  },
  {
    "objectID": "posts/movies-getting-longer/index.html#analysis",
    "href": "posts/movies-getting-longer/index.html#analysis",
    "title": "Are blockbusters getting (reely) longer ?",
    "section": "",
    "text": "To simplify the analysis we can consider more recent releases (2022) and compare them to releases from much older timeframe (1990-2000).  The runtime distributions for movies in these 2 categories is different although not significantly.\n\nbase_window = 1990, 2001\ntest_year = 2022\n\n# We shall create a tidy dataset for further exploration\nquery_test = f\"\"\"\nselect runtime_mins\n, case when release_year={test_year} then '{test_year}'\nelse '{base_window[0]}-{base_window[1]-1}'\nend as release_year\nfrom df_yearly_top_movies\nwhere (release_year &gt;= {base_window[0]} and release_year &lt; {base_window[1]}) or (release_year={test_year})\n\"\"\"\n\ndf_test = sql(query_test)\n\np2 = gg.ggplot(df_test) + \\\n    gg.geom_density(\n        gg.aes(x='runtime_mins', fill='release_year'),\n        alpha=0.5,\n        size=0.5\n    )\n\np2.show()\n\n   \n   \n\n\nNow we can compare runtimes between two periods. It would have been a straightforward exercise in testing the hypothesis of difference of means using a t-test had the distributions of runtimes been more normally distributed.  Since this is not the case, we resort to using bootstrap to compare the difference of means. \n\nvariable = \"runtime_mins\"\nalpha = 0.05\n\ng1 = sql(f\"SELECT {variable} FROM df_yearly_top_movies WHERE release_year &lt; 2001\")\ng2 = sql(f\"SELECT {variable} FROM df_yearly_top_movies WHERE release_year == 2022\")\n\ndef difference_of_mean(sample1, sample2):\n    return np.mean(sample2) - np.mean(sample1)\n\nres = stats.bootstrap((g1[variable], g2[variable]), statistic=difference_of_mean, random_state=42)\n\nprint(f\"Mean difference of means: {round(np.mean(res.bootstrap_distribution),0)}\")\nprint(f\"Proportion &gt; 0: {round(np.mean(res.bootstrap_distribution &gt; 0),2)}\")\n\nMean difference of means: 20.0\nProportion &gt; 0: 0.97\n\n\nIf we bootstrap the mean of movie times and take the difference between means of release year 2022 from release years 1990-2000, there is evidence that blockbuster movies are getting longer in recent years, and the difference can be up to 20 min. \nSo on your next visit to the theatre make sure to get some extra popcorn."
  },
  {
    "objectID": "posts/post-with-code/index.html",
    "href": "posts/post-with-code/index.html",
    "title": "Post With Code",
    "section": "",
    "text": "This is a post with executable code.\n\nplot(density(rnorm(100)))"
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Regression Room",
    "section": "",
    "text": "Post With Code\n\n\n\n\n\n\nnews\n\n\ncode\n\n\nanalysis\n\n\n\n\n\n\n\n\n\nDec 21, 2024\n\n\nPrateek\n\n\n\n\n\n\n\n\n\n\n\n\nAre blockbusters getting (reely) longer ?\n\n\n\n\n\n\nanalysis\n\n\ncode\n\n\n\n\n\n\n\n\n\nJul 21, 2023\n\n\nPrateek\n\n\n\n\n\n\nNo matching items"
  }
]